package station;

import java.util.ArrayList;
import java.util.Date;
import client.Client;

public class TicketingStation extends Thread implements Station{
	ClientQueue cq;
	public ArrayList<TicketBox> tbs = new ArrayList<TicketBox>();
	
	public TicketingStation(){
		cq = new ClientQueue();
		tbs.add(new TicketBox());
		tbs.add(new TicketBox());
		tbs.add(new TicketBox());
		System.out.println(cq);
	}
	
	public void arrive(Client client) {
		cq.enqueue(client);
	}
	
	public void run(){
		System.out.println("##" + cq.size());
		while(cq.size()>0){
			match();	
		}
		if(cq.size() == 0) return;	
	}
	
	public void match() {
		
		while(tbs.size() == 0){ 
			System.out.println("no ticketbox available");	
			try {
				sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		
		Client matchedClient = cq.dequeue();
		matchedClient.tb = tbs.remove(0);
		matchedClient.tb.ticketing(matchedClient);
		System.out.println("[" + matchedClient+ "]" + " uses "+ matchedClient.tb);
	}
	
	public void ticketFinish(Client c){
		System.out.println("["+c+"]" + " returns "+ c.tb);
		setDate(c);
		tbs.add(c.tb);
	}

	@Override
	public void calTimeInterval(Object ob) {
		if(ob instanceof Client){
			((Client) ob).ticketWaitInterval = (int) (((Client)ob).dequeueTime - ((Client)ob).enqueueTime);
		}
	}

	@Override
	public void setDate(Object ob) {
		if(ob instanceof Client){
			((Client) ob).ticketFinish = new Date();
		}
	}

}
